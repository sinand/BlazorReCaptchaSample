@page "/"
@using BlazorReCaptcha
@rendermode InteractiveServer

<PageTitle>reCaptcha</PageTitle>

<h1>Hello, world!</h1>

<div class="row">
    <div class="col-md-6">
        <ReCaptcha @ref="reCaptcha" OnClientSuccess="OnClientSuccess" OnExpired="OnExpired" />
        <h2>@((MarkupString)Status)</h2>
        <button type="button" class="btn btn-primary" disabled="@DisablePostButton" @onclick="PostTest">Post Test</button>
    </div>
</div>

@code {
    private string Status;

    private ReCaptcha? reCaptcha;

    private bool DisablePostButton => reCaptcha?.ClientIsValid != true;

    private void OnClientSuccess()
    {
        Status = "Recaptcha <b>client</b> side validation success";
        Console.WriteLine("Recaptcha client side validation success");
    }

    private void OnExpired()
    {
        Status = "Recaptcha expired";
        Console.WriteLine("Recaptcha expired");
    }

    private async void PostTest()
    {
        if (!reCaptcha.ClientIsValid)
        {
            Status = "Recaptcha <b>client</b> side validation failed!";
            StateHasChanged();
            return;
        }
        var response = await reCaptcha.GetResponseAsync();

        try
        {
            var verifyresponse = await reCaptcha.Verify(response);
            if (verifyresponse.success == false)
            {
                Status = "Recaptcha <b>server</b> side validation failed! : " + string.Join(",", verifyresponse.ErrorCodes);

                StateHasChanged();
                return;
            }
        }
        catch (HttpRequestException e)
        {
            Status = "Recaptcha <b>server</b> side validation failed! : " + e.Message;

            StateHasChanged();
            return;
        }

        Status = "Recaptcha <b>server</b> side validation success";
        StateHasChanged();
    }
}
